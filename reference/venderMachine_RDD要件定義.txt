venderMachine 自動販売機プログラム

//###### 要件定義 ######
//## Requirement Definition Document（RDD）##

//====== Original RDD ====== / 2020-04-20
・販売者 販売する
複数回販売できる

・購入者
お金を払って商品を得る
一回につき1アイテム購入できる

・商品
コーヒー、コーラ、オレンジジュース、紅茶、ウォーター

・商品の価格
コーヒー：130円
コーラ：110円
オレンジジュース：110円
紅茶：130円
ウォーターは100円

・お金
おつりが発生する場合もある

販売の例
①『お金を投入してください』と表示する
②お金を投入
③入金額を表示
④商品を表示する
⑤商品の選択
⑥商品を渡す
⑤おつりが有れば渡す
⑥続けて販売する


クラス
・販売を管理をするクラス(Mainクラス)
・商品を管理するクラス(Drinkクラス)
・販売処理をするクラス(Venderクラス)


//====== Additional RDD ====== / 2020-07-14
・オリジナルは３クラスのコンソール・アプリケーションだったが、
  Servlet/jspを加えた動的Webプロジェクトとする。

・商品と価格は固定だったが、新たにユーザーが商品追加・価格編集できるようにする。


//====== Additional RDD ====== / 2021-07-27
・View ボタンを 有効 / 無効で表示切替。当然、無効ならボタンは押せない仕様とする。
・View Locale対応 日本語 / 英語表記とする。
.View Localeでも 同じ金額。 100円 = $100。
・View 投入金額は ラジオボタンで [ 10 | 50 | 100 | 500 | 1000 ]
・View <table>商品一覧・ボタン
*     現在金額の表示と おつりボタン
*     購入商品リストの表示
*     「おつり ○○円です。ありがとうございました。」の表示。

◆データ遷移
View -> Servlet
  int input,
  String order {各商品の name=""属性 | おつり }
/**
 * @param String order
 * @content jspから渡されるボタンクリックの内容
 * @value input10, input50, input100, input500, input1000
 *        moneyのinput, 数字は投入金額
 * @value req0, req1, req2, req3, req4
 *        コーヒー, コーラ, オレンジジュース, 紅茶, ウォーターの注文
 */

View <- Servlet
  int current
  List<Boolean> canBuyList,

◆購入処理
*引数: int index
*メソッド: calc.doBuy(index)
*購入品: String buyDrink = drinkList.get(index);
*価格:   int priceDrink = priceList.get(index);
*
*現在金額の差引: current -= priceDrink;
*購入品のリスト追加: List<String> didBuy
*                 didBuy.add(buyDrink);
*購入品の表示: mess.viewBuy(buyDrink);
*             StringBuffer buf;
*             buf.append(buyDrink);
